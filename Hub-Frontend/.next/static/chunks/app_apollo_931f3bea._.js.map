{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/thilaknarasimhamurthy/Downloads/studenthub/app/apollo/client.ts"],"sourcesContent":["// app/apollo/client.ts\nimport { ApolloClient, InMemoryCache, NormalizedCacheObject, createHttpLink, makeVar } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { persistCache, SessionStorageWrapper } from 'apollo3-cache-persist';\n\n// Type definitions\nexport interface User {\n  id: string;\n  role: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n}\n\n// Safely access client-side storage\nconst getFromStorage = (key: string): string | null => {\n  if (typeof window !== 'undefined') {\n    try {\n      return sessionStorage.getItem(key);\n    } catch (e) {\n      console.error(`Error accessing sessionStorage for key ${key}:`, e);\n      return null;\n    }\n  }\n  return null;\n};\n\n// Reactive variables for auth state\n// Initialize with empty values to ensure consistent server/client rendering\nexport const isLoggedInVar = makeVar<boolean>(false);\nexport const authTokenVar = makeVar<string>('');\nexport const currentUserVar = makeVar<User | null>(null);\n\n// Function to initialize auth state from storage\n// Only called on the client after hydration\nexport const initAuthState = (): void => {\n  if (typeof window === 'undefined') return;\n  \n  // Initialize auth token\n  const savedToken = getFromStorage('auth:token');\n  if (savedToken) {\n    try {\n      const token = JSON.parse(savedToken);\n      authTokenVar(token);\n      isLoggedInVar(true);\n    } catch (e) {\n      console.error('Error parsing auth token:', e);\n    }\n  }\n\n  // Initialize user\n  const savedUser = getFromStorage('auth:user');\n  if (savedUser) {\n    try {\n      const user = JSON.parse(savedUser);\n      currentUserVar(user);\n    } catch (e) {\n      console.error('Error parsing user data:', e);\n    }\n  }\n};\n\n// Save reactive variables to session storage when they change\nexport const setAuthToken = (token: string): void => {\n  if (typeof window !== 'undefined') {\n    try {\n      sessionStorage.setItem('auth:token', JSON.stringify(token));\n    } catch (e) {\n      console.error('Error saving auth token to session storage:', e);\n    }\n  }\n  authTokenVar(token);\n  isLoggedInVar(!!token);\n};\n\nexport const setCurrentUser = (user: User | null): void => {\n  if (typeof window !== 'undefined') {\n    try {\n      if (user) {\n        sessionStorage.setItem('auth:user', JSON.stringify(user));\n      } else {\n        sessionStorage.removeItem('auth:user');\n      }\n    } catch (e) {\n      console.error('Error saving user to session storage:', e);\n    }\n  }\n  currentUserVar(user);\n};\n\nexport const logout = (): void => {\n  if (typeof window !== 'undefined') {\n    try {\n      sessionStorage.removeItem('auth:token');\n      sessionStorage.removeItem('auth:user');\n    } catch (e) {\n      console.error('Error clearing session storage during logout:', e);\n    }\n  }\n  authTokenVar('');\n  currentUserVar(null);\n  isLoggedInVar(false);\n};\n\nconst httpLink = createHttpLink({\n  uri: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000/graphql',\n});\n\n// Auth link that reads token from Apollo cache\nconst authLink = setContext((_, { headers }) => {\n  const token = authTokenVar();\n  \n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    }\n  };\n});\n\n// Configure cache with type policies\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        // Local fields (client-side only)\n        isLoggedIn: {\n          read() {\n            return isLoggedInVar();\n          }\n        },\n        currentUser: {\n          read() {\n            return currentUserVar();\n          }\n        },\n        // Server fields with caching policies\n        events: {\n          merge(existing, incoming) {\n            return incoming;\n          },\n        },\n      },\n    },\n  },\n});\n\n// Create a default Apollo client for SSR and initial client render\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache,\n  ssrMode: typeof window === 'undefined',\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-and-network',\n    },\n  },\n});\n\n// Initialize apollo client with an asynchronous function\n// This should only be called on the client after hydration\nexport const initializeApollo = async (): Promise<ApolloClient<NormalizedCacheObject>> => {\n  if (typeof window === 'undefined') {\n    console.warn('initializeApollo called on server - returning default client');\n    return client;\n  }\n\n  // Initialize auth state from storage\n  initAuthState();\n\n  try {\n    // Set up cache persistence\n    await persistCache({\n      cache,\n      storage: new SessionStorageWrapper(window.sessionStorage),\n      key: 'apollo-cache',\n      debug: false,\n    });\n    console.log('Apollo cache persistence initialized successfully');\n  } catch (error) {\n    console.error('Error initializing cache persistence:', error);\n  }\n\n  return client;\n};\n\nexport default client;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":["file:///Users/thilaknarasimhamurthy/Downloads/studenthub/app/apollo/provider.tsx"],"sourcesContent":["// app/apollo/provider.tsx\n'use client';\n\nimport { ApolloProvider } from '@apollo/client';\nimport { ReactNode, useEffect, useState } from 'react';\nimport client, { initializeApollo } from './client';\nimport { usePathname } from 'next/navigation';\n\n/**\n * A wrapping component to provide Apollo Client to the application.\n * Uses a dynamic import approach to prevent hydration mismatches.\n */\nconst ApolloWrapper = ({ children }: { children: ReactNode }) => {\n  const [mounted, setMounted] = useState(false);\n  // Track when we can start client-side rendering\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // On mount, initialize the Apollo client\n  useEffect(() => {\n    if (mounted) {\n      initializeApollo().catch(err => {\n        console.error('Failed to initialize Apollo Client:', err);\n      });\n    }\n  }, [mounted]);\n\n  // Always render the children using the default client\n  // This ensures server and client rendering match\n  return (\n    <ApolloProvider client={client}>\n      {children}\n    </ApolloProvider>\n  );\n};\n\nexport default ApolloWrapper;"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAG1B;AACA;AACA;;;AAJA;;;;AAOA;;;CAGC,GACD,MAAM,gBAAgB,CAAC,EAAE,QAAQ,EAA2B;;IAC1D,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,gDAAgD;IAChD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mCAAE;YACR,WAAW;QACb;kCAAG,EAAE;IAEL,yCAAyC;IACzC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mCAAE;YACR,IAAI,SAAS;gBACX,CAAA,GAAA,0HAAA,CAAA,mBAAgB,AAAD,IAAI,KAAK;+CAAC,CAAA;wBACvB,QAAQ,KAAK,CAAC,uCAAuC;oBACvD;;YACF;QACF;kCAAG;QAAC;KAAQ;IAEZ,sDAAsD;IACtD,iDAAiD;IACjD,qBACE,6LAAC,2KAAA,CAAA,iBAAc;QAAC,QAAQ,0HAAA,CAAA,UAAM;kBAC3B;;;;;;AAGP;GAvBM;KAAA;uCAyBS","debugId":null}}]
}