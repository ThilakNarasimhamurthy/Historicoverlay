{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/thilaknarasimhamurthy/Downloads/studenthub/app/profile/page.tsx"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useEffect, useState } from \"react\"\nimport { useQuery } from \"@apollo/client\"\nimport { IS_LOGGED_IN } from '@/app/apollo/operations/auth'\n\n// Define types based on the GraphQL schema\ntype UserRole = 'STUDENT' | 'UNIVERSITY' | 'COMPANY' | 'ADMIN'\ntype AccountStatus = 'ACTIVE' | 'VERIFIED' | 'SUSPENDED'\n\n// Student type\ninterface Student {\n  userId: string\n  graduationYear: number\n  specialization: string\n  interests: string[]\n  university: string\n  careerGoals: string[]\n  dateOfBirth: string\n}\n\n// University type\ninterface University {\n  userId: string\n  institutionName: string\n  foundationYear: number\n  address: string\n  contactNumber: string\n  website?: string\n}\n\n// Company type\ninterface Company {\n  userId: string\n  companyName: string\n  industry: string\n  foundationYear: number\n  address: string\n  contactNumber: string\n  website?: string\n}\n\n// Admin type\ninterface Admin {\n  userId: string\n  accessLevel: string\n  adminSince: string\n  lastAccess: string\n}\n\n// User interface matching GraphQL schema\ninterface User {\n  id: string\n  email: string\n  firstName: string\n  lastName: string\n  role: UserRole\n  accountStatus: AccountStatus\n  loginHistory?: string[]\n  createdAt: string\n  updatedAt: string\n  student?: Student\n  university?: University\n  company?: Company\n  admin?: Admin\n}\n\n// Enhanced ProfileContextType to include role and authentication status\ntype ProfileContextType = {\n  profilePic: string | null\n  userName: string\n  userRole: string\n  isLoggedIn: boolean\n  user: User | null\n  isLoading: boolean\n  setProfilePic: (url: string) => void\n  setUserName: (name: string) => void\n}\n\nconst ProfileContext = createContext<ProfileContextType | undefined>(undefined)\n\nexport function ProfileProvider({ children }: { children: React.ReactNode }) {\n  const [profilePic, setProfilePic] = useState<string | null>(null)\n  const [userName, setUserName] = useState(\"\")\n  \n  // Use the Apollo query to get user data from cache\n  const { data, loading } = useQuery(IS_LOGGED_IN, {\n    fetchPolicy: 'cache-and-network', // Get cached data first, then network if needed\n  })\n  \n  const user: User | null = data?.currentUser || null\n  const isLoggedIn = !!user\n  const userRole = user?.role || \"\"\n\n  // Initialize profile from cache and localStorage\n  useEffect(() => {\n    // Try to load from localStorage first\n    const storedPic = localStorage.getItem(\"profilePic\")\n    const storedName = localStorage.getItem(\"userName\")\n    \n    if (storedPic) setProfilePic(storedPic)\n    \n    // If user is logged in, prioritize cache data\n    if (user) {\n      // Use user name from cache, fallback to localStorage\n      if (user.firstName && user.lastName) {\n        setUserName(`${user.firstName} ${user.lastName}`)\n      } else if (storedName) {\n        setUserName(storedName)\n      }\n      \n      // Use avatar from cache if available (assuming there's an avatar field somewhere)\n      // This might need adjustment based on your actual schema\n      if (profilePic) {\n        setProfilePic(profilePic)\n      }\n    } else if (storedName) {\n      // If no user in cache, use localStorage\n      setUserName(storedName)\n    }\n  }, [user, profilePic])\n\n  // Persist profile changes to localStorage\n  useEffect(() => {\n    if (profilePic) localStorage.setItem(\"profilePic\", profilePic)\n    if (userName) localStorage.setItem(\"userName\", userName)\n  }, [profilePic, userName])\n\n  return (\n    <ProfileContext.Provider value={{ \n      profilePic, \n      userName, \n      userRole,\n      isLoggedIn,\n      user,\n      isLoading: loading,\n      setProfilePic, \n      setUserName \n    }}>\n      {children}\n    </ProfileContext.Provider>\n  )\n}\n\nexport function useProfile() {\n  const context = useContext(ProfileContext)\n  if (!context) throw new Error(\"useProfile must be used within ProfileProvider\")\n  return context\n}"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;;;AAJA;;;;AA+EA,MAAM,+BAAiB,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAkC;AAE9D,SAAS,gBAAgB,EAAE,QAAQ,EAAiC;;IACzE,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAC5D,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEzC,mDAAmD;IACnD,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,mKAAA,CAAA,WAAQ,AAAD,EAAE,uIAAA,CAAA,eAAY,EAAE;QAC/C,aAAa;IACf;IAEA,MAAM,OAAoB,MAAM,eAAe;IAC/C,MAAM,aAAa,CAAC,CAAC;IACrB,MAAM,WAAW,MAAM,QAAQ;IAE/B,iDAAiD;IACjD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;qCAAE;YACR,sCAAsC;YACtC,MAAM,YAAY,aAAa,OAAO,CAAC;YACvC,MAAM,aAAa,aAAa,OAAO,CAAC;YAExC,IAAI,WAAW,cAAc;YAE7B,8CAA8C;YAC9C,IAAI,MAAM;gBACR,qDAAqD;gBACrD,IAAI,KAAK,SAAS,IAAI,KAAK,QAAQ,EAAE;oBACnC,YAAY,GAAG,KAAK,SAAS,CAAC,CAAC,EAAE,KAAK,QAAQ,EAAE;gBAClD,OAAO,IAAI,YAAY;oBACrB,YAAY;gBACd;gBAEA,kFAAkF;gBAClF,yDAAyD;gBACzD,IAAI,YAAY;oBACd,cAAc;gBAChB;YACF,OAAO,IAAI,YAAY;gBACrB,wCAAwC;gBACxC,YAAY;YACd;QACF;oCAAG;QAAC;QAAM;KAAW;IAErB,0CAA0C;IAC1C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;qCAAE;YACR,IAAI,YAAY,aAAa,OAAO,CAAC,cAAc;YACnD,IAAI,UAAU,aAAa,OAAO,CAAC,YAAY;QACjD;oCAAG;QAAC;QAAY;KAAS;IAEzB,qBACE,6LAAC,eAAe,QAAQ;QAAC,OAAO;YAC9B;YACA;YACA;YACA;YACA;YACA,WAAW;YACX;YACA;QACF;kBACG;;;;;;AAGP;GA7DgB;;QAKY,mKAAA,CAAA,WAAQ;;;KALpB;AA+DT,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS,MAAM,IAAI,MAAM;IAC9B,OAAO;AACT;IAJgB","debugId":null}}]
}