{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/thilaknarasimhamurthy/Downloads/studenthub/app/apollo/provider.tsx"],"sourcesContent":["// app/providers/AuthProvider.tsx\n'use client';\n\nimport { ReactNode, useEffect, useState } from 'react';\nimport { useRouter, usePathname } from 'next/navigation';\nimport { useQuery } from '@apollo/client';\nimport { gql } from '@apollo/client';\nimport { isLoggedInVar, currentUserVar } from '@/app/apollo/client';\n\n// GraphQL query to check auth status\nconst GET_AUTH_STATUS = gql`\n  query GetAuthStatus {\n    isLoggedIn @client\n    currentUser @client\n  }\n`;\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\n// List of public routes that don't require authentication\nconst publicRoutes = [\n  '/auth/signin',\n  '/auth/signup',\n  '/auth/forgot-password',\n  '/auth/reset-password',\n  '/',\n  '/about',\n  '/contact'\n];\n\n// Map of role-specific home pages\nconst roleHomePages = {\n  admin: '/dashboard/admin',\n  student: '/dashboard/student',\n  university: '/dashboard/university',\n  company: '/dashboard/company',\n};\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const router = useRouter();\n  const pathname = usePathname();\n  const [isInitialized, setIsInitialized] = useState(false);\n  \n  const { data, loading } = useQuery(GET_AUTH_STATUS);\n  \n  useEffect(() => {\n    // Skip during initial load\n    if (!isInitialized) {\n      setIsInitialized(true);\n      return;\n    }\n\n    // Skip if still loading auth data\n    if (loading) return;\n\n    const isLoggedIn = data?.isLoggedIn;\n    const currentUser = data?.currentUser;\n    \n    // Current path is a public route, allow access\n    if (publicRoutes.some(route => pathname?.startsWith(route))) {\n      // If user is logged in and trying to access auth pages, redirect to dashboard\n      if (isLoggedIn && (pathname?.includes('/auth/') || pathname === '/')) {\n        const homePage = currentUser?.role ? \n          roleHomePages[currentUser.role.toLowerCase()] : \n          '/dashboard';\n        \n        router.replace(homePage);\n      }\n      return;\n    }\n    \n    // Not public route and not logged in - redirect to sign in\n    if (!isLoggedIn) {\n      router.replace('/auth/signin');\n      return;\n    }\n    \n    // Check role-based access for dashboard routes\n    if (pathname?.includes('/dashboard/')) {\n      const urlRole = pathname.split('/')[2]; // Extract role from URL\n      const userRole = currentUser?.role?.toLowerCase();\n      \n      // If user role doesn't match URL role and it's not the admin\n      if (urlRole && userRole !== 'admin' && urlRole !== userRole) {\n        router.replace(roleHomePages[userRole] || '/dashboard');\n      }\n    }\n  }, [pathname, data, loading, router, isInitialized]);\n  \n  // Show loading state during auth check\n  if (loading && !publicRoutes.some(route => pathname?.startsWith(route))) {\n    return (\n      <div className=\"flex h-screen w-screen items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"h-10 w-10 animate-spin rounded-full border-4 border-primary border-t-transparent mx-auto\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  return <>{children}</>;\n}"],"names":[],"mappings":"AAAA,iCAAiC;;;;;AAGjC;AACA;AACA;AACA;;;AALA;;;;;AAQA,qCAAqC;AACrC,MAAM,kBAAkB,iJAAA,CAAA,MAAG,CAAC;;;;;AAK5B,CAAC;AAMD,0DAA0D;AAC1D,MAAM,eAAe;IACnB;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,kCAAkC;AAClC,MAAM,gBAAgB;IACpB,OAAO;IACP,SAAS;IACT,YAAY;IACZ,SAAS;AACX;AAEO,SAAS,aAAa,EAAE,QAAQ,EAAqB;;IAC1D,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,WAAW,CAAA,GAAA,qIAAA,CAAA,cAAW,AAAD;IAC3B,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEnD,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,mKAAA,CAAA,WAAQ,AAAD,EAAE;IAEnC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,2BAA2B;YAC3B,IAAI,CAAC,eAAe;gBAClB,iBAAiB;gBACjB;YACF;YAEA,kCAAkC;YAClC,IAAI,SAAS;YAEb,MAAM,aAAa,MAAM;YACzB,MAAM,cAAc,MAAM;YAE1B,+CAA+C;YAC/C,IAAI,aAAa,IAAI;0CAAC,CAAA,QAAS,UAAU,WAAW;0CAAS;gBAC3D,8EAA8E;gBAC9E,IAAI,cAAc,CAAC,UAAU,SAAS,aAAa,aAAa,GAAG,GAAG;oBACpE,MAAM,WAAW,aAAa,OAC5B,aAAa,CAAC,YAAY,IAAI,CAAC,WAAW,GAAG,GAC7C;oBAEF,OAAO,OAAO,CAAC;gBACjB;gBACA;YACF;YAEA,2DAA2D;YAC3D,IAAI,CAAC,YAAY;gBACf,OAAO,OAAO,CAAC;gBACf;YACF;YAEA,+CAA+C;YAC/C,IAAI,UAAU,SAAS,gBAAgB;gBACrC,MAAM,UAAU,SAAS,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,wBAAwB;gBAChE,MAAM,WAAW,aAAa,MAAM;gBAEpC,6DAA6D;gBAC7D,IAAI,WAAW,aAAa,WAAW,YAAY,UAAU;oBAC3D,OAAO,OAAO,CAAC,aAAa,CAAC,SAAS,IAAI;gBAC5C;YACF;QACF;iCAAG;QAAC;QAAU;QAAM;QAAS;QAAQ;KAAc;IAEnD,uCAAuC;IACvC,IAAI,WAAW,CAAC,aAAa,IAAI,CAAC,CAAA,QAAS,UAAU,WAAW,SAAS;QACvE,qBACE,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;;;;;kCACf,6LAAC;wBAAE,WAAU;kCAA6B;;;;;;;;;;;;;;;;;IAIlD;IAEA,qBAAO;kBAAG;;AACZ;GAhEgB;;QACC,qIAAA,CAAA,YAAS;QACP,qIAAA,CAAA,cAAW;QAGF,mKAAA,CAAA,WAAQ;;;KALpB","debugId":null}}]
}