{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/thilaknarasimhamurthy/Desktop/Hub-Frontend/app/apollo/client.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache, NormalizedCacheObject, createHttpLink, makeVar } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { persistCache, SessionStorageWrapper } from 'apollo3-cache-persist';\n\n// Type definitions\nexport interface User {\n  id: string;\n  role: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n}\n\n// Safely access client-side storage\nconst getFromStorage = (key: string): string | null => {\n  if (typeof window !== 'undefined') {\n    try {\n      return sessionStorage.getItem(key);\n    } catch (e) {\n      console.error(`Error accessing sessionStorage for key ${key}:`, e);\n      return null;\n    }\n  }\n  return null;\n};\n\n// Reactive variables for auth state\n// Initialize with empty values to ensure consistent server/client rendering\nexport const isLoggedInVar = makeVar<boolean>(false);\nexport const authTokenVar = makeVar<string>('');\nexport const currentUserVar = makeVar<User | null>(null);\n\n// Function to initialize auth state from storage\n// Only called on the client after hydration\nexport const initAuthState = (): void => {\n  if (typeof window === 'undefined') return;\n  \n  // Initialize auth token\n  const savedToken = getFromStorage('auth:token');\n  if (savedToken) {\n    try {\n      const token = JSON.parse(savedToken);\n      authTokenVar(token);\n      isLoggedInVar(true);\n    } catch (e) {\n      console.error('Error parsing auth token:', e);\n    }\n  }\n\n  // Initialize user\n  const savedUser = getFromStorage('auth:user');\n  if (savedUser) {\n    try {\n      const user = JSON.parse(savedUser);\n      currentUserVar(user);\n    } catch (e) {\n      console.error('Error parsing user data:', e);\n    }\n  }\n};\n\n// Save reactive variables to session storage when they change\nexport const setAuthToken = (token: string): void => {\n  if (typeof window !== 'undefined') {\n    try {\n      sessionStorage.setItem('auth:token', JSON.stringify(token));\n    } catch (e) {\n      console.error('Error saving auth token to session storage:', e);\n    }\n  }\n  authTokenVar(token);\n  isLoggedInVar(!!token);\n};\n\nexport const setCurrentUser = (user: User | null): void => {\n  if (typeof window !== 'undefined') {\n    try {\n      if (user) {\n        sessionStorage.setItem('auth:user', JSON.stringify(user));\n      } else {\n        sessionStorage.removeItem('auth:user');\n      }\n    } catch (e) {\n      console.error('Error saving user to session storage:', e);\n    }\n  }\n  currentUserVar(user);\n};\n\nexport const logout = (): void => {\n  if (typeof window !== 'undefined') {\n    try {\n      sessionStorage.removeItem('auth:token');\n      sessionStorage.removeItem('auth:user');\n    } catch (e) {\n      console.error('Error clearing session storage during logout:', e);\n    }\n  }\n  authTokenVar('');\n  currentUserVar(null);\n  isLoggedInVar(false);\n};\n\nconst httpLink = createHttpLink({\n  uri: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000/graphql',\n});\n\n// Auth link that reads token from Apollo cache\nconst authLink = setContext((_, { headers }) => {\n  const token = authTokenVar();\n  \n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    }\n  };\n});\n\n// Configure cache with type policies - UPDATED with new policies\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        // Local fields (client-side only)\n        isLoggedIn: {\n          read() {\n            return isLoggedInVar();\n          }\n        },\n        currentUser: {\n          read() {\n            return currentUserVar();\n          }\n        },\n        // Server fields with caching policies\n        events: {\n          merge(existing, incoming) {\n            return incoming;\n          },\n        },\n        // Add policies for all event-related queries\n        allEvents: {\n          merge(existing, incoming) {\n            return incoming;\n          },\n        },\n        eventsNearMe: {\n          merge(existing, incoming) {\n            return incoming;\n          },\n        },\n        myEvents: {\n          merge(existing, incoming) {\n            return incoming;\n          },\n        },\n        savedEvents: {\n          merge(existing, incoming) {\n            return incoming;\n          },\n        },\n        userParticipatedEvents: {\n          merge(existing, incoming) {\n            return incoming;\n          },\n        },\n      },\n    },\n    // Add policies for Event type\n    Event: {\n      fields: {\n        likeCount: {\n          read(existing) {\n            return existing || 0;\n          }\n        },\n        saveCount: {\n          read(existing) {\n            return existing || 0;\n          }\n        },\n        isLikedByUser: {\n          read(existing) {\n            return existing || false;\n          }\n        },\n        isSavedByUser: {\n          read(existing) {\n            return existing || false;\n          }\n        },\n        isRegisteredByUser: {\n          read(existing) {\n            return existing || false;\n          }\n        }\n      }\n    },\n    // Add policies for ExternalEvent type\n    ExternalEvent: {\n      fields: {\n        likeCount: {\n          read(existing) {\n            return existing || 0;\n          }\n        },\n        saveCount: {\n          read(existing) {\n            return existing || 0;\n          }\n        },\n        isLikedByUser: {\n          read(existing) {\n            return existing || false;\n          }\n        },\n        isSavedByUser: {\n          read(existing) {\n            return existing || false;\n          }\n        },\n        isRegisteredByUser: {\n          read(existing) {\n            return false; // External events can't be registered\n          }\n        }\n      }\n    }\n  },\n});\n\n// Create a default Apollo client for SSR and initial client render\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache,\n  ssrMode: typeof window === 'undefined',\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-and-network',\n    },\n  },\n});\n\n// Initialize apollo client with an asynchronous function\n// This should only be called on the client after hydration\nexport const initializeApollo = async (): Promise<ApolloClient<NormalizedCacheObject>> => {\n  if (typeof window === 'undefined') {\n    console.warn('initializeApollo called on server - returning default client');\n    return client;\n  }\n\n  // Initialize auth state from storage\n  initAuthState();\n\n  try {\n    // Set up cache persistence\n    await persistCache({\n      cache,\n      storage: new SessionStorageWrapper(window.sessionStorage),\n      key: 'apollo-cache',\n      debug: false,\n    });\n    console.log('Apollo cache persistence initialized successfully');\n  } catch (error) {\n    console.error('Error initializing cache persistence:', error);\n  }\n\n  return client;\n};\n\nexport default client;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":["file:///Users/thilaknarasimhamurthy/Desktop/Hub-Frontend/app/apollo/provider.tsx"],"sourcesContent":["// app/apollo/provider.tsx\n'use client';\n\nimport { ApolloProvider } from '@apollo/client';\nimport { ReactNode, useEffect, useState } from 'react';\nimport client, { initializeApollo } from './client';\nimport { usePathname } from 'next/navigation';\n\n/**\n * A wrapping component to provide Apollo Client to the application.\n * Uses a dynamic import approach to prevent hydration mismatches.\n */\nconst ApolloWrapper = ({ children }: { children: ReactNode }) => {\n  const [mounted, setMounted] = useState(false);\n  // Track when we can start client-side rendering\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // On mount, initialize the Apollo client\n  useEffect(() => {\n    if (mounted) {\n      initializeApollo().catch(err => {\n        console.error('Failed to initialize Apollo Client:', err);\n      });\n    }\n  }, [mounted]);\n\n  // Always render the children using the default client\n  // This ensures server and client rendering match\n  return (\n    <ApolloProvider client={client}>\n      {children}\n    </ApolloProvider>\n  );\n};\n\nexport default ApolloWrapper;"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAG1B;AACA;AACA;AAJA;;;;;AAOA;;;CAGC,GACD,MAAM,gBAAgB,CAAC,EAAE,QAAQ,EAA2B;IAC1D,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,gDAAgD;IAChD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,WAAW;IACb,GAAG,EAAE;IAEL,yCAAyC;IACzC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,SAAS;YACX,CAAA,GAAA,uHAAA,CAAA,mBAAgB,AAAD,IAAI,KAAK,CAAC,CAAA;gBACvB,QAAQ,KAAK,CAAC,uCAAuC;YACvD;QACF;IACF,GAAG;QAAC;KAAQ;IAEZ,sDAAsD;IACtD,iDAAiD;IACjD,qBACE,8OAAC,wKAAA,CAAA,iBAAc;QAAC,QAAQ,uHAAA,CAAA,UAAM;kBAC3B;;;;;;AAGP;uCAEe","debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":["file:///Users/thilaknarasimhamurthy/Desktop/Hub-Frontend/app/apollo/operations/auth.tsx"],"sourcesContent":["// app/apollo/operations/auth.ts\nimport { gql } from '@apollo/client';\nimport client, { isLoggedInVar, authTokenVar, currentUserVar, User, setAuthToken, setCurrentUser } from '@/app/apollo/client';\n\n// Define enhanced types to include role-specific fields\nexport type { User } from '@/app/apollo/client';\n\n// Add these interfaces if they're not already defined in client.ts\nexport interface Student {\n  userId: string;\n  graduationYear: number;\n  specialization: string;\n  interests: string[];\n  university: string;\n  careerGoals: string[];\n  dateOfBirth: string;\n}\n\nexport interface University {\n  userId: string;\n  institutionName: string;\n  foundationYear: number;\n  address: string;\n  contactNumber: string;\n  website?: string;\n}\n\nexport interface Company {\n  userId: string;\n  companyName: string;\n  industry: string;\n  foundationYear: number;\n  address: string;\n  contactNumber: string;\n  website?: string;\n}\n\nexport interface Admin {\n  userId: string;\n  accessLevel: string;\n  adminSince: string;\n  lastAccess: string;\n}\n\n// Enhanced User interface with role-specific data\nexport interface EnhancedUser extends User {\n  accountStatus: 'ACTIVE' | 'VERIFIED' | 'SUSPENDED';\n  student?: Student;\n  university?: University;\n  company?: Company;\n  admin?: Admin;\n}\n\n// Client-side query to check login status\nexport const IS_LOGGED_IN = gql`\n  query IsUserLoggedIn {\n    isLoggedIn @client\n    currentUser @client\n  }\n`;\n\n// Login mutation with role-specific fields\nexport const LOGIN = gql`\n  mutation Login($email: String!, $password: String!) {\n    login(input: { email: $email, password: $password }) {\n      token\n      user {\n        id\n        role\n        email\n        firstName\n        lastName\n        accountStatus\n        # Role-specific fields\n        student {\n          userId\n          graduationYear\n          specialization\n          interests\n          university\n          careerGoals\n          dateOfBirth\n        }\n        university {\n          userId\n          institutionName\n          foundationYear\n          address\n          contactNumber\n          website\n        }\n        company {\n          userId\n          companyName\n          industry\n          foundationYear\n          address\n          contactNumber\n          website\n        }\n        admin {\n          userId\n          accessLevel\n          adminSince\n          lastAccess\n        }\n      }\n    }\n  }\n`;\n\n// Get current user query\nexport const GET_CURRENT_USER = gql`\n  query GetCurrentUser {\n    me {\n      id\n      role\n      email\n      firstName\n      lastName\n      accountStatus\n      # Role-specific fields\n      student {\n        userId\n        graduationYear\n        specialization\n        interests\n        university\n        careerGoals\n        dateOfBirth\n      }\n      university {\n        userId\n        institutionName\n        foundationYear\n        address\n        contactNumber\n        website\n      }\n      company {\n        userId\n        companyName\n        industry\n        foundationYear\n        address\n        contactNumber\n        website\n      }\n      admin {\n        userId\n        accessLevel\n        adminSince\n        lastAccess\n      }\n    }\n  }\n`;\n\nexport interface LoginResponse {\n  login: {\n    token: string;\n    user: EnhancedUser;\n  }\n}\n\n// Helper functions with proper type annotations\nexport const login = (token: string, user: EnhancedUser): void => {\n  setAuthToken(token);\n  setCurrentUser(user);\n  \n  // Store complete user data including role-specific fields\n  localStorage.setItem('currentUser', JSON.stringify(user));\n};\n\nexport const logout = (): void => {\n  // Use the logout function from client.ts\n  require('@/app/apollo/client').logout();\n  \n  // Clear Apollo cache on logout\n  client.clearStore().catch((err: Error) => {\n    console.error('Error clearing Apollo cache:', err);\n  });\n  \n  // Ensure localStorage is cleared\n  localStorage.removeItem('token');\n  localStorage.removeItem('currentUser');\n};\n\n// Helper function to get role-specific data\nexport const getRoleData = (user: EnhancedUser) => {\n  if (!user) return null;\n  \n  const role = user.role.toLowerCase();\n  \n  switch (role) {\n    case 'student':\n      return user.student;\n    case 'university':\n      return user.university;\n    case 'company':\n      return user.company;\n    case 'admin':\n      return user.admin;\n    default:\n      return null;\n  }\n};"],"names":[],"mappings":"AAAA,gCAAgC;;;;;;;;;AAChC;AACA;;;AAoDO,MAAM,eAAe,8IAAA,CAAA,MAAG,CAAC;;;;;AAKhC,CAAC;AAGM,MAAM,QAAQ,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CzB,CAAC;AAGM,MAAM,mBAAmB,8IAAA,CAAA,MAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CpC,CAAC;AAUM,MAAM,QAAQ,CAAC,OAAe;IACnC,CAAA,GAAA,uHAAA,CAAA,eAAY,AAAD,EAAE;IACb,CAAA,GAAA,uHAAA,CAAA,iBAAc,AAAD,EAAE;IAEf,0DAA0D;IAC1D,aAAa,OAAO,CAAC,eAAe,KAAK,SAAS,CAAC;AACrD;AAEO,MAAM,SAAS;IACpB,yCAAyC;IACzC,iFAA+B,MAAM;IAErC,+BAA+B;IAC/B,uHAAA,CAAA,UAAM,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC;QACzB,QAAQ,KAAK,CAAC,gCAAgC;IAChD;IAEA,iCAAiC;IACjC,aAAa,UAAU,CAAC;IACxB,aAAa,UAAU,CAAC;AAC1B;AAGO,MAAM,cAAc,CAAC;IAC1B,IAAI,CAAC,MAAM,OAAO;IAElB,MAAM,OAAO,KAAK,IAAI,CAAC,WAAW;IAElC,OAAQ;QACN,KAAK;YACH,OAAO,KAAK,OAAO;QACrB,KAAK;YACH,OAAO,KAAK,UAAU;QACxB,KAAK;YACH,OAAO,KAAK,OAAO;QACrB,KAAK;YACH,OAAO,KAAK,KAAK;QACnB;YACE,OAAO;IACX;AACF","debugId":null}},
    {"offset": {"line": 425, "column": 0}, "map": {"version":3,"sources":["file:///Users/thilaknarasimhamurthy/Desktop/Hub-Frontend/components/hooks/useProfile.tsx"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useEffect, useState, useCallback } from \"react\"\nimport { useQuery } from \"@apollo/client\"\nimport { IS_LOGGED_IN, EnhancedUser } from '@/app/apollo/operations/auth'\n\n// Enhanced ProfileContextType to include role and authentication status\ntype ProfileContextType = {\n  profilePic: string | null\n  userName: string\n  userRole: string\n  isLoggedIn: boolean\n  user: EnhancedUser | null\n  roleData: any // The role-specific data (student, university, etc.)\n  isLoading: boolean\n  isInitializing: boolean // Track initial loading separately\n  setProfilePic: (url: string) => void\n  setUserName: (name: string) => void\n  getRoleDisplayName: () => string\n}\n\nconst ProfileContext = createContext<ProfileContextType | undefined>(undefined)\n\nexport function ProfileProvider({ children }: { children: React.ReactNode }) {\n  // Track client-side rendering\n  const [mounted, setMounted] = useState(false)\n  // Track initialization of auth state\n  const [isInitializing, setIsInitializing] = useState(true)\n  // Track errors for debugging\n  const [initError, setInitError] = useState<Error | null>(null)\n  \n  // State for user profile data\n  const [profileState, setProfileState] = useState({\n    profilePic: null as string | null,\n    userName: \"\",\n    userRole: \"\",\n    isLoggedIn: false,\n    user: null as EnhancedUser | null,\n    roleData: null as any\n  })\n  \n  // Skip query during SSR\n  const { data, loading, error } = useQuery(IS_LOGGED_IN, {\n    fetchPolicy: 'cache-and-network',\n    skip: !mounted,\n    notifyOnNetworkStatusChange: true,\n  })\n  \n  // Mark as mounted when on client\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n  \n  // Extract role-specific data from user object\n  const extractRoleData = useCallback((user: EnhancedUser | null) => {\n    if (!user || !user.role) return null\n    \n    const roleLower = user.role.toLowerCase()\n    \n    // Return the appropriate role data based on user role\n    switch (roleLower) {\n      case 'student':\n        return user.student || null\n      case 'university':\n        return user.university || null\n      case 'company':\n        return user.company || null\n      case 'admin':\n        return user.admin || null\n      default:\n        return null\n    }\n  }, [])\n  \n  // Initialize state from localStorage and Apollo cache\n  useEffect(() => {\n    // Skip during SSR\n    if (!mounted) return\n    \n    try {\n      // Safely access localStorage (only on client)\n      const storedPic = typeof window !== 'undefined' ? localStorage.getItem(\"profilePic\") : null\n      const storedName = typeof window !== 'undefined' ? localStorage.getItem(\"userName\") : null\n      \n      // Get user from Apollo cache\n      const user = data?.currentUser || null\n      const isLoggedIn = !!user\n      const userRole = user?.role || \"\"\n      const roleData = extractRoleData(user)\n      \n      // Generate user name\n      let displayName = \"\"\n      if (user?.firstName && user?.lastName) {\n        displayName = `${user.firstName} ${user.lastName}`\n      } else if (storedName) {\n        displayName = storedName\n      }\n      \n      // Update state\n      setProfileState({\n        profilePic: user?.avatar || storedPic || null,\n        userName: displayName,\n        userRole,\n        isLoggedIn,\n        user,\n        roleData\n      })\n      \n    } catch (err) {\n      // Log error but don't crash\n      console.error(\"Error initializing profile:\", err)\n      setInitError(err instanceof Error ? err : new Error(String(err)))\n    } finally {\n      // Mark initialization as complete\n      setIsInitializing(false)\n    }\n  }, [mounted, data, extractRoleData])\n  \n  // Safe setter for profile picture\n  const setProfilePic = useCallback((url: string) => {\n    if (!mounted) return // Skip during SSR\n    \n    setProfileState(prev => ({ ...prev, profilePic: url }))\n    \n    try {\n      if (typeof window !== 'undefined') {\n        localStorage.setItem(\"profilePic\", url)\n      }\n    } catch (err) {\n      console.error(\"Error saving profile pic:\", err)\n    }\n  }, [mounted])\n  \n  // Safe setter for user name\n  const setUserName = useCallback((name: string) => {\n    if (!mounted) return // Skip during SSR\n    \n    setProfileState(prev => ({ ...prev, userName: name }))\n    \n    try {\n      if (typeof window !== 'undefined') {\n        localStorage.setItem(\"userName\", name)\n      }\n    } catch (err) {\n      console.error(\"Error saving user name:\", err)\n    }\n  }, [mounted])\n  \n  // Get formatted role name\n  const getRoleDisplayName = useCallback(() => {\n    const role = profileState.userRole?.toLowerCase() || \"\"\n    \n    switch (role) {\n      case 'student':\n        return \"Student\"\n      case 'university':\n        return \"University\"\n      case 'company':\n        return \"Company\"\n      case 'admin':\n        return \"Administrator\"\n      default:\n        return \"User\"\n    }\n  }, [profileState.userRole])\n  \n  // The actual loading state combines multiple factors\n  const isLoading = (!mounted || isInitializing || loading)\n  \n  // Dev-mode logging for auth issues\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      if (error) {\n        console.warn(\"Auth query error:\", error)\n      }\n      if (initError) {\n        console.warn(\"Profile initialization error:\", initError)\n      }\n    }\n  }, [error, initError])\n  \n  // Context value\n  const contextValue = {\n    ...profileState,\n    isLoading,\n    isInitializing,\n    setProfilePic,\n    setUserName,\n    getRoleDisplayName\n  }\n  \n  return (\n    <ProfileContext.Provider value={contextValue}>\n      {children}\n    </ProfileContext.Provider>\n  )\n}\n\n// Custom hook to use the profile context\nexport function useProfile() {\n  const context = useContext(ProfileContext)\n  if (!context) {\n    throw new Error(\"useProfile must be used within ProfileProvider\")\n  }\n  return context\n}"],"names":[],"mappings":"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","debugId":null}}]
}