{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/thilaknarasimhamurthy/Downloads/studenthub/app/apollo/provider.tsx"],"sourcesContent":["// /components/AuthProvider.js\n'use client';\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useApolloClient, gql } from '@apollo/client';\n\n// Type definitions\ninterface AuthUser {\n  id: string;\n  email: string;\n  role: string;\n  name?: string;\n  initials?: string;\n}\n\ninterface AuthContextType {\n  user: AuthUser | null;\n  loading: boolean;\n  login: (token: string, user: AuthUser) => void;\n  logout: () => void;\n}\n\n// Create context\nconst AuthContext = createContext<AuthContextType | null>(null);\n\n// Auth provider component\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<AuthUser | null>(null);\n  const [loading, setLoading] = useState(true);\n  const client = useApolloClient();\n\n  // Write user data to Apollo cache\n  const updateUserCache = (userData: AuthUser | null) => {\n    client.writeQuery({\n      query: gql`\n        query GetUser {\n          user @client {\n            id\n            email\n            role\n            name\n            initials\n          }\n        }\n      `,\n      data: {\n        user: userData\n      }\n    });\n  };\n\n  // Parse JWT token to get initials\n  const parseUserFromToken = (token: string): { id: string; email: string; role: string } | null => {\n    if (!token) return null;\n    \n    try {\n      // JWT tokens are in format: header.payload.signature\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(\n        atob(base64)\n          .split('')\n          .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n          .join('')\n      );\n      \n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      console.error('Error parsing JWT token:', error);\n      return null;\n    }\n  };\n\n  // Format initials from name or email\n  const getInitials = (name?: string, email?: string): string => {\n    if (name) {\n      // Get first letter of each word in name\n      return name\n        .split(' ')\n        .map(part => part.charAt(0))\n        .join('')\n        .toUpperCase()\n        .substring(0, 2);\n    } else if (email) {\n      // Use first letter of email\n      return email.charAt(0).toUpperCase();\n    }\n    return 'U'; // Default\n  };\n\n  // Login function - called after successful authentication\n  const login = (token: string, userData: AuthUser) => {\n    // Store token in localStorage\n    localStorage.setItem('auth_token', token);\n    \n    // Extract user data from token if not all fields are provided\n    const tokenData = parseUserFromToken(token);\n    \n    // Create complete user object\n    const user: AuthUser = {\n      ...userData,\n      id: userData.id || tokenData?.id || '',\n      email: userData.email || tokenData?.email || '',\n      role: userData.role || tokenData?.role || 'default',\n    };\n    \n    // Add initials if not provided\n    if (!user.initials) {\n      user.initials = getInitials(user.name, user.email);\n    }\n    \n    // Update state\n    setUser(user);\n    \n    // Update Apollo cache\n    updateUserCache(user);\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('auth_token');\n    setUser(null);\n    updateUserCache(null);\n    \n    // Clear Apollo cache\n    client.resetStore();\n  };\n\n  // Check for existing token on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('auth_token');\n      \n      if (token) {\n        try {\n          // Parse user data from token\n          const tokenData = parseUserFromToken(token);\n          \n          if (tokenData) {\n            // Create user object\n            const user: AuthUser = {\n              id: tokenData.id,\n              email: tokenData.email,\n              role: tokenData.role,\n              initials: getInitials(undefined, tokenData.email)\n            };\n            \n            // Update state\n            setUser(user);\n            \n            // Update Apollo cache\n            updateUserCache(user);\n          }\n        } catch (error) {\n          console.error('Error restoring auth state:', error);\n          localStorage.removeItem('auth_token');\n        }\n      }\n      \n      setLoading(false);\n    };\n    \n    checkAuth();\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user, loading, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\n// Custom hook for using auth context\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  \n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///Users/thilaknarasimhamurthy/Downloads/studenthub/app/apollo/client.ts"],"sourcesContent":["// app/apollo/client.ts\nimport { ApolloClient, InMemoryCache, createHttpLink, makeVar, ReactiveVar } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\n// Define the User interface\nexport interface User {\n  id: string;\n  role: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n}\n\n// Reactive variables with correct generic types\nexport const isLoggedInVar: ReactiveVar<boolean> = makeVar<boolean>(false);\nexport const authTokenVar: ReactiveVar<string> = makeVar<string>('');\n// This is likely the source of the error - specifying that currentUserVar can hold User or null\nexport const currentUserVar: ReactiveVar<User | null> = makeVar<User | null>(null);\n\nconst httpLink = createHttpLink({\n  uri: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000/graphql',\n});\n\n// Auth link that reads token from Apollo cache\nconst authLink = setContext((_, { headers }) => {\n  const token = authTokenVar();\n  \n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    }\n  };\n});\n\n// Configure cache with type policies\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        isLoggedIn: {\n          read() {\n            return isLoggedInVar();\n          }\n        },\n        currentUser: {\n          read() {\n            return currentUserVar();\n          }\n        },\n        events: {\n          merge(existing, incoming) {\n            return incoming;\n          },\n        },\n      },\n    },\n  },\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-and-network',\n    },\n  },\n});\n\nexport default client;"],"names":[],"mappings":"AAAA,uBAAuB;;;;;;;AACvB;AAAA;AAAA;AAAA;AACA;;;AAYO,MAAM,gBAAsC,CAAA,GAAA,uKAAA,CAAA,UAAO,AAAD,EAAW;AAC7D,MAAM,eAAoC,CAAA,GAAA,uKAAA,CAAA,UAAO,AAAD,EAAU;AAE1D,MAAM,iBAA2C,CAAA,GAAA,uKAAA,CAAA,UAAO,AAAD,EAAe;AAE7E,MAAM,WAAW,CAAA,GAAA,oKAAA,CAAA,iBAAc,AAAD,EAAE;IAC9B,KAAK,QAAQ,GAAG,CAAC,mBAAmB,IAAI;AAC1C;AAEA,+CAA+C;AAC/C,MAAM,WAAW,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAD,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE;IACzC,MAAM,QAAQ;IAEd,OAAO;QACL,SAAS;YACP,GAAG,OAAO;YACV,eAAe,QAAQ,CAAC,OAAO,EAAE,OAAO,GAAG;QAC7C;IACF;AACF;AAEA,qCAAqC;AACrC,MAAM,QAAQ,IAAI,wKAAA,CAAA,gBAAa,CAAC;IAC9B,cAAc;QACZ,OAAO;YACL,QAAQ;gBACN,YAAY;oBACV;wBACE,OAAO;oBACT;gBACF;gBACA,aAAa;oBACX;wBACE,OAAO;oBACT;gBACF;gBACA,QAAQ;oBACN,OAAM,QAAQ,EAAE,QAAQ;wBACtB,OAAO;oBACT;gBACF;YACF;QACF;IACF;AACF;AAEA,MAAM,SAAS,IAAI,0KAAA,CAAA,eAAY,CAAC;IAC9B,MAAM,SAAS,MAAM,CAAC;IACtB;IACA,gBAAgB;QACd,YAAY;YACV,aAAa;QACf;IACF;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///Users/thilaknarasimhamurthy/Downloads/studenthub/app/layout.tsx"],"sourcesContent":["// app/layout.tsx\n'use client';\n\nimport { ApolloProvider } from '@apollo/client';\nimport { AuthProvider } from '@/app/apollo/provider';\nimport apolloClient from '@/app/apollo/client';\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <ApolloProvider client={apolloClient}>\n          <AuthProvider>\n            {children}\n          </AuthProvider>\n        </ApolloProvider>\n      </body>\n    </html>\n  );\n}"],"names":[],"mappings":"AAAA,iBAAiB;;;;;AAGjB;AACA;AACA;AAJA;;;;;AAMe,SAAS,WAAW,EACjC,QAAQ,EAGT;IACC,qBACE,8OAAC;QAAK,MAAK;kBACT,cAAA,8OAAC;sBACC,cAAA,8OAAC,wKAAA,CAAA,iBAAc;gBAAC,QAAQ,uHAAA,CAAA,UAAY;0BAClC,cAAA,8OAAC,0HAAA,CAAA,eAAY;8BACV;;;;;;;;;;;;;;;;;;;;;AAMb","debugId":null}}]
}